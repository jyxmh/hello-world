1 (1) Use modules to structure the codes (like play.py,game.py)
  (2) Use class to organize the functions and attributes and other components, and one class usually focuses on one specific behavior(class Room() in model.py, contains many variables describe the status of a location in the game and many functions to get the corresponding status) 
  (3) Use related functions in a class 
2 Yes
  Good Examples with meaningful names
	(1) model.py line 46: ‘is_light’: the status of whether the light is on
  	(2) model.py line 51: ‘tring_to_deal_with_snake’: record the choice of player that whether to deal with snake
   	(3) model.py line 52: ‘lost_in_maze’: record  the status of player that whether he/she is lost in maze
   
  Bad Examples with not meaningful names: 
   	(1) game.py line 130: function: start2(): its name is very confusing and is different from what the function actually do
   	(2) game.py line 30: ‘impossible _treasures’: it records number of treasures that can never be found, so it is better named ‘impossible_treasure_number’
   	(3) game.py line 37: ‘turns’ : should be more specific
3 do one thing:
  	(1) model.py:line 142:
        	def destroy(self):
        		self.hide()
  	(2) model.py line 149:
		def __str__(self): 
			return self.text
  do more than one thing
  	(1) play.py: line 11: def play(seed=None)
  	(2) data.py: line 67: def section3(data, x, y, *verbs):

4 function with side effect: data.py: line 146, section 7: def section7(data, n, room_n, *etc):
	line 151 obj.drop(room) in this function,it drops ‘room’, if the following commands are no executed, it might cause side effect since room is dropped but room2 is not appended.
    	
5 repeated code: game.py: line 908 - line 938
  	the judgement sentence: “if obj is (bird/snake/dragon/bear) and self.is_here(parameter):” has repeated many times, we can make it a function meet_animal_judgement(para1,para2),
  	the return will be True or False
6 (1)yes
	example  : adventure.py line 43:   
	try:
		loop()
	except EOFError:
		pass
  (2)Some inputs without output: ’!’,’#’,’@’,’$’,’%’,’^’,’(’,’+’,’)’,’&’ and their combinations usually get no output
     interrupt the program: ctrl + C

7 many classes have responsibility over more than one piece of functionality: class Game() (game.py), class Data()(data.py)
  More specifically, in class Game(),it controls the light condition, start of the game, location, display instructions, operations of the dwarf, etc It contains too many functions and should be broken into more smaller classes

8 some classes are cohesive, while some are not.
  example of not cohesive class:
  game.py class Game():
  	(1) there are more than 15 attributes:game.py line 21 - line 37
   	(2) many methods manipulates very few attributes: line 114, line 130

9 The author mainly use comments as explanation of intent near the explained items, for example(below are three examples of good comments as explanation of intent):
	(1)explanation of module intent: model.py, line 1: """Classes representing Adventure game components."""
   	(2)explanation of class intent: model.py, line 4:  """An entry in the travel table."""
 	(3)explanation of a specific variable: game.py line 35: deaths = 0  # how many times the player has died
  
  The author use comment as public API: data.py line 199: parse(data, datafile): """Read the Adventure data file and return a ``Data`` object."""
  Also, there are some TODO comments: game.py line 1640: # TODO: 12000
  Some bad comments:
	(1)used as position marker: game.py line 1605: def start_closing_cave(self):  #10000
	(2)redundant comments: game.py line:34: is_dead = False  # whether we are currently dead
 
10 example:adventure.py line 13 line 19
   vertical formatting:
   (1) line 18 is a blank line to separate two functions
   (2) function loop() below function baudout(s), because loop() depend on baudout(s) since it calls baudout(s)

11 use the command: python -m unittest discover
   the results: 
 		Ran 13 tests in 0.055s
		FAILED (failures=2, errors=11)
   It also shows many Import Errors, Exceptions, NameErrors
   So in short, it does not pass the test
   F.I.R.S.T. criteria: 
 	(1)Fast: in my laptop, it costs only 0.055s, but the running time depends on the hardware devices and since the test include many errors, I can not decide whether it is fast
	(2)Independent: Yes, each file is not depending on each other
   	(3)Repeatable: Yes, I can run them for many times with the same result
	(4)Self-validating: as the result shows, several tests have errors and we can not decide whether the tests satisfy this item
	(5)Timely: No. According to the changelog:
   		1.0 — 2011 February 15 — 100% test coverage, feature-complete
		0.3 — 2011 January 31 — first public release
    	   The first public release date is 2011 January 31, and the 100% test coverage date is 2011 February 15
   